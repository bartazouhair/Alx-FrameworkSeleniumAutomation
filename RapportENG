***** Project Report: AlxAutomation *****
AlxAutomation is a test automation project using Selenium, Cucumber, ExtentReports, and other tools to test the ALX intranet site.
This report details the tools used, the overall architecture, the benefits, and continuous integration with Jenkins, GitHub, Java, Cucumber, WebDriver, TestNG, PageObjectModel, StepDefinition, HTMLReport, JSON, etc.

## Table of Contents ##
1.Introduction
The AlxAutomation project aims to automate tests for the ALX intranet site using modern and efficient testing tools. This project covers functionalities like login, curriculum management, planning, user profile, projects, and project search.

2. Tools Used
  - Java JDK 11 or higher
  - Maven: For dependency management and project lifecycle.
  - Selenium WebDriver: For automating browser interactions.
  - Cucumber: For scenario-based testing in natural language.
  - TestNG: For managing test suites.
  - ExtentReports: For generating detailed HTML reports.
  - Jenkins: For continuous integration and automated test execution.
  - GitHub: For source code management and collaboration.
  - Log4j: For logging.

3. Overall Architecture
The project's architecture follows a modular approach, with distinct layers for managing tests, pages, step definitions, and utilities. Here is a simplified diagram:

|
|-- src/main/java
|   |-- pageObjects
|   |   |-- LoginAppPage.java
|   |   |-- CurriculumPage.java
|   |   |-- PlanningPage.java
|   |   |-- ProfilPage.java
|   |   |-- ProjectPage.java
|   |   |-- SearchPage.java
|   |-- utils
|       |-- BrowserFactory.java
|       |-- Constante.java
|       |-- ExtentHTMLReport.java
|       |-- PropertiesFile.java
|-- src/test/java
|   |-- features
|   |   |-- LoginApp.feature
|   |   |-- Curriculum.feature
|   |   |-- Planning.feature
|   |   |-- Profil.feature
|   |   |-- Project.feature
|   |   |-- SearchProject.feature
|   |-- stepsDefinitions
|   |   |-- SDLoginApp.java
|   |   |-- SDCurriculumsAlx.java
|   |   |-- SDPlanningAlx.java
|   |   |-- SDProfilAlx.java
|   |   |-- SDProjectAlx.java
|   |   |-- SDSearchProjectAlx.java
|   |-- Hooks
|   |   |-- Hook.java
|   |-- modules
|   |   |-- TestRunner.java
|-- pom.xml

4. Benefits
  - Modularity: Clear separation of responsibilities with PageObjectModel and StepDefinitions.
  - Readability: Using Cucumber for natural language scenarios.
  - Extensibility: Easy to add new test functionalities.
  - Detailed Reports: ExtentReports provides clear and detailed HTML reports.
  - Automation: Continuous integration with Jenkins for automated test executions.

5. Continuous Integration with Jenkins
Jenkins is configured to automatically run tests on every commit. The steps include:
  - Cloning the Repository: Jenkins fetches the code from GitHub.
  - Installing Dependencies: Maven installs dependencies defined in pom.xml.
  - Running Tests: Jenkins executes tests using defined runners.
  - Generating Reports: HTML reports are generated by ExtentReports.

6. Component Details
  - GitHub: Source code is managed in a GitHub repository, facilitating collaboration and version control.
  - Java: The project uses Java for implementing tests and pages.
  - Selenium WebDriver: Selenium WebDriver automates browser interactions. Tests cover multiple browsers using different drivers (Chrome, Firefox, IE).
  - Cucumber: Cucumber defines test scenarios in Gherkin, making tests accessible and readable to all team members.
  - TestNG: TestNG manages test suites and allows flexible test configuration and organization.
  - PageObjectModel: Application pages are represented by distinct classes, making code maintenance and extensibility easier.
  - StepDefinition: Steps of Cucumber scenarios are implemented in step definition classes, ensuring clear separation of responsibilities.
  - HTMLReport: ExtentReports generates detailed HTML reports of test results, including screenshots and logs.
  - JSON: Test results are also available in JSON format for easy integration with other tools.
  - Running Tests: mvn clean test -Dcucumber.options="--tags @run"

7. Diagrams

[GitHub Repository] -> [Jenkins Server] -> [Jenkins Jobs]
                                      -> [Maven] -> [Selenium WebDriver]
                                      -> [TestNG]
                                      -> [Cucumber]
                                      -> [ExtentReports]
                                      -> [Browsers (Chrome, Firefox, IE)]
                                      -> [Log4j]

Client Side
-----------
[Browsers (Chrome, Firefox, IE)]

Backend
-------
[GitHub Repository] -> [Jenkins Server] -> [Jenkins Jobs]
                                      -> [Maven] -> [Selenium WebDriver]
                                      -> [TestNG]
                                      -> [Cucumber]
                                      -> [ExtentReports]
                                      -> [Page Object Model]
                                      -> [Step Definitions]


Client Side
-----------
[Browsers (Chrome, Firefox, IE)]
       |
       v
[Selenium WebDriver] <-- [Step Definitions] <-- [Page Object Model]

Server Side
-----------
[GitHub Repository] -> [Jenkins Server] -> [Jenkins Jobs] -> [Maven]
                                                |
                                                v
                                            [Cucumber]
                                                |
                                                v
                                             [TestNG]
                                                |
                                                v
                                          [ExtentReports]

8. Conclusion
The AlxAutomation project is a solid example of implementing test automation using modern tools and robust development practices. With continuous integration using Jenkins, GitHub, and detailed report generation, this project ensures high quality and reliability of tests.

## For any questions or assistance, please contact ** Zouhair Barta ** ##
